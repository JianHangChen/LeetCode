

// sol1, dp, from wp
// https://github.com/wisdompeak/LintCode/tree/master/DP/325.Football
class Solution {
public:
    int findWinner(vector<vector<double>> &p) {
        double dp[16][17][16] {};
        
        for(int i = 0; i < 16; i++) dp[i][1][0] = 1;
        
        
        for(int j = 2; j <= 16; j *=2){
            for(int i = 0; i < 16; i += j){
                for(int k = 0; k < j/2; k++){
                    for(int t = 0; t < j/2; t++){
                        dp[i][j][k] += dp[i+j/2][j/2][t] * p[i+k][i+j/2+t] * dp[i][j/2][k];
                    }
                }
                
                for(int k = j/2; k < j; k++){
                    for(int t = 0; t < j/2; t++){
                        dp[i][j][k] += dp[i][j/2][t] * p[i+k][i+t] * dp[i+j/2][j/2][k-j/2];    
                    }
                }
            }
        }
        int res = 0;
        for(int i = 0; i < 16; i++){
            if(dp[0][16][i] > dp[0][16][res]) res = i;
        }
        
        return res;
        
    }
};

// k < j / 2
// dp[i][j][k] = dp[i][j/2][k] * (dp[i+j/2][j/2][0] * p[i+k][i+j/2] 
//    + dp[i+j/2][j/2][1] * p[i+k][i+j/2+1] + dp[i+j/2][j/2][2] * p[i+k][i+j/2+2] + ...
// + dp[i+j/2][j/2][j/2-1] * p[i+k][i+j-1]
// )

// k >= j / 2
// dp[i][j][k] = dp[i+j/2][j/2][k-j/2] * (dp[i][j/2][0] * p[i+k][i+0] 
//    + dp[i][j/2][1] * p[i+k][i+1] + dp[i][j/2][2] * p[i+k][i+2] + ...
// + dp[i][j/2][j/2-1] * p[i+k][i+j/2-1]
// )


// [0.0,0.6,1.0,0.2,0.2,0.9,0.8,0.1,0.4,0.0,0.6,0.1,0.0,0.4,0.4,0.1],
// [0.4,0.0,0.8,1.0,0.7,0.8,0.7,0.7,1.0,0.8,0.6,0.1,0.1,0.5,0.9,0.6],
// [0.0,0.2,0.0,0.4,0.1,0.0,0.6,0.7,0.0,0.4,0.2,0.3,0.1,0.7,0.2,0.7],
// [0.8,0.0,0.6,0.0,0.3,0.4,0.0,0.1,0.5,0.5,0.6,0.5,0.6,0.7,0.7,0.9],
// [0.8,0.3,0.9,0.7,0.0,0.4,0.4,0.6,0.9,0.6,0.9,0.8,0.3,0.1,0.4,0.1],
// [0.1,0.2,1.0,0.6,0.6,0.0,1.0,0.2,1.0,0.3,0.7,0.3,0.3,0.8,0.5,0.1],
// [0.2,0.3,0.4,1.0,0.6,0.0,0.0,0.6,0.5,1.0,0.7,0.2,0.8,0.3,0.6,0.6],
// [0.9,0.3,0.3,0.9,0.4,0.8,0.4,0.0,1.0,0.0,0.5,1.0,0.5,0.6,0.3,0.5],
// [0.6,0.0,1.0,0.5,0.1,0.0,0.5,0.0,0.0,0.6,0.4,0.7,0.1,0.4,0.3,0.5],
// [1.0,0.2,0.6,0.5,0.4,0.7,0.0,1.0,0.4,0.0,0.1,0.5,0.8,0.0,0.5,0.9],
// [0.4,0.4,0.8,0.4,0.1,0.3,0.3,0.5,0.6,0.9,0.0,0.7,0.7,0.1,0.2,1.0],
// [0.9,0.9,0.7,0.5,0.2,0.7,0.8,0.0,0.3,0.5,0.3,0.0,0.4,0.6,0.7,0.5],
// [1.0,0.9,0.9,0.4,0.7,0.7,0.2,0.5,0.9,0.2,0.3,0.6,0.0,0.6,0.0,0.8],
// [0.6,0.5,0.3,0.3,0.9,0.2,0.7,0.4,0.6,1.0,0.9,0.4,0.4,0.0,0.6,0.2],
// [0.6,0.1,0.8,0.3,0.6,0.5,0.4,0.7,0.7,0.5,0.8,0.3,1.0,0.4,0.0,0.7],
// [0.9,0.4,0.3,0.1,0.9,0.9,0.4,0.5,0.5,0.1,0.0,0.5,0.2,0.8,0.3,0.0]
