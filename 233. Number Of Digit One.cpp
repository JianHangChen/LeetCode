
// sol1, from sol1
// math solution, this one is very hard

// 1's place:
// 1 1
// 10 1
// 100 1, 11, 21, 31, ..., 91   10
// 1000 1, 11, 21...,91, 101, 111, 121...991   100
// 1001 1, 11, 21...,91, 101, 111, 121...991, 1001   101
// 100x 1, 11, 21...,91, 101, 111, 121...991, 1001,1010   111
// 1010 101
// 1011 102
// 101x 102
// (n / 10) * 1 + min(max( ((n % 10) - 1 )+ 1, 0), 1)


// ten's place:
// 1 0
// 10 1
// 100 10, 11, 12,...19  10
// 1000 10, 11, 12,...19, 110, 111,...119, 210, ..210...919  100
// 1010 10, 11, 12,...19, 110, 111,...119, 210, ..210...919,1010  100 + 1
// 101x 10, 11, 12,...19, 110, 111,...119, 210, ..210...919,1010,  100+x+1
// 102x 10, 11, 12,...19, 110, 111,...119, 210, ..210...919,1010,1011,...1019  100 + 10

// (n / (ten * 10)) * ten + min(max(n % (10ten)-ten + 1, 0 ), ten )



class Solution {
public:
    int countDigitOne(int n) {
        int count = 0;
        for(long long i = 1; i <= n; i *= 10){
            count += n / (10 * i) * i + min(max(n % (10 * i) - i + 1, 0LL), i);
        }
        return count;
    }
};
