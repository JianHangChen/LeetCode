class Solution:
    #sol1, O(n^3), very slow
    def longestPalindrome(self, s: str) -> str:
        def isPalindrome(string):
            return string == string[::-1]
        substring = ""
        maxl = 0
        for i in range(len(s)):
            for j in range(i, len(s)):
                if j + 1 - i > maxl:
                    if isPalindrome(s[i:j+1]):
                        maxl = j + 1 - i
                        substring = s[i:j+1]
        return substring
    
    #sol2, O(n^2), O(1)
    def longestPalindrome(self, s: str) -> str:        
        def expand(i,j):
            while i >= 0 and j < len(s):
                if s[i] == s[j]:
                    i -= 1
                    j += 1
                else:
                    break
            l = j - i - 1
            return i + 1, j - 1, l
        
        maxl = maxi = maxj = 0
                
        for i in range(len(s)):
            ii, jj, l = expand(i,i)
            if l > maxl:
                maxi = ii; maxj = jj; maxl = l;
                
            ii, jj, l = expand(i,i+1)
            if l > maxl:
                maxi = ii; maxj = jj; maxl = l;
                
        return s[maxi:maxj + 1]
            
            
